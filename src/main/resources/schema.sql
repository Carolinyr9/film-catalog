-- This script is designed for H2/PostgreSQL and may need minor adjustments for other databases.

-- Drop tables in reverse order of creation to handle foreign key constraints
DROP TABLE IF EXISTS watchlist_movies;
DROP TABLE IF EXISTS movie_genres;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS watchlists;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS users;


-- Independent Tables (no foreign keys)
-- These are created first.

CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE genres (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    username VARCHAR(255) UNIQUE
);

CREATE TABLE movies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL UNIQUE,
    synopsis VARCHAR(255),
    release_year INT NOT NULL,
    duration INT NOT NULL,
    content_rating VARCHAR(255)
);


-- Dependent Tables (with foreign keys)

CREATE TABLE watchlists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    description VARCHAR(255),
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_watchlist_user FOREIGN KEY (user_id) REFERENCES users(id)
);


-- Join Tables (for Many-to-Many relationships)

CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_userroles_user FOREIGN KEY (user_id) REFERENCES users(id),
    CONSTRAINT fk_userroles_role FOREIGN KEY (role_id) REFERENCES roles(id)
);

CREATE TABLE movie_genres (
    movie_id BIGINT NOT NULL,
    genre_id BIGINT NOT NULL,
    PRIMARY KEY (movie_id, genre_id),
    CONSTRAINT fk_moviegenres_movie FOREIGN KEY (movie_id) REFERENCES movies(id),
    CONSTRAINT fk_moviegenres_genre FOREIGN KEY (genre_id) REFERENCES genres(id)
);

CREATE TABLE watchlist_movies (
    watchlist_id BIGINT NOT NULL,
    movie_id BIGINT NOT NULL,
    PRIMARY KEY (watchlist_id, movie_id),
    CONSTRAINT fk_watchlistmovies_watchlist FOREIGN KEY (watchlist_id) REFERENCES watchlists(id),
    CONSTRAINT fk_watchlistmovies_movie FOREIGN KEY (movie_id) REFERENCES movies(id)
);